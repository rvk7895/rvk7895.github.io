<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://rvk7895.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://rvk7895.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-12-25T20:21:05+00:00</updated><id>https://rvk7895.github.io/feed.xml</id><title type="html">Ritvik Aryan Kalra</title><subtitle>I am a final year Computer Science student at IIIT Hyderabad. I learn, build and break things, definitely not in that order. Currently working as a Research Associate at PipableAI. </subtitle><entry><title type="html">Effective Java Notes</title><link href="https://rvk7895.github.io/blog/2023/effective-java-notes/" rel="alternate" type="text/html" title="Effective Java Notes"/><published>2023-06-27T15:12:00+00:00</published><updated>2023-06-27T15:12:00+00:00</updated><id>https://rvk7895.github.io/blog/2023/effective-java-notes</id><content type="html" xml:base="https://rvk7895.github.io/blog/2023/effective-java-notes/"><![CDATA[<p>I recently started to read the book Effective Java, to improve my coding habits and to learn in-depth about the functionalities provided by Java. Here I would be adding notes of the items that I think are relevant could be helpful to me in future and might to others also.</p> <h2 id="builders">Builders</h2> <p>When the class has a lot of optional parameters, one should consider using Builder. Builders allow you the flexibility which Static Factories and Constructors don’t for optional parameters.</p> <p>Traditionally the design pattern of <strong><a href="https://www.captaindebug.com/2011/05/telescoping-constructor-antipattern#:~:text=The%20Telescoping%20Constructor%20is%20an,there%20are%20better%20alternatives%20availble.">telescoping constructor</a></strong> was used in case of optional parameters. But that makes you write a lot of redundant code, which later can become unreadable with many methods of the same name.</p> <p>Another method which can be used to tackle the problem of optional parameters is that of using <code class="language-plaintext highlighter-rouge">setter</code> methods. Here we can use a constructor to just create an object and then use the setter methods to assign attributes to that object. Something like</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">a1</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">a2</span><span class="o">;</span>
	<span class="c1">//setters</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">seta1</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span><span class="n">a1</span> <span class="o">=</span> <span class="n">val</span><span class="o">;}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">seta2</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span><span class="n">a2</span> <span class="o">=</span> <span class="n">val</span><span class="o">;}</span>
<span class="o">}</span>

<span class="c1">//inside main</span>
<span class="nc">Test</span> <span class="n">test</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Test</span><span class="o">();</span>
<span class="n">test</span><span class="o">.</span><span class="na">seta1</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</code></pre></div></div> <p>This is the <strong>**</strong><strong>JavaBean</strong><strong>**</strong> pattern. But this strategy has its own disadvantages, first being that the object would be in an inconsistent state for sometime, and second being that it automatically precludes the possibility of the class being immutable.</p> <p>Hence to cover for the advantages come builder classes. There syntax is as follows:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">a1</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">a2</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">a3</span><span class="o">;</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="o">{</span>
		<span class="c1">//required</span>
		<span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">a1</span><span class="o">;</span>

		<span class="c1">//optional</span>
		<span class="kd">private</span> <span class="kt">int</span> <span class="n">a2</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="kd">private</span> <span class="kt">int</span> <span class="n">a3</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

		<span class="kd">public</span> <span class="nf">Builder</span><span class="o">(</span><span class="kt">int</span> <span class="n">a1</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">this</span><span class="o">.</span><span class="na">a1</span> <span class="o">=</span> <span class="n">a1</span>
		<span class="o">}</span>

		<span class="kd">public</span> <span class="nc">Builder</span> <span class="nf">a2</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">a2</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span> <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="kd">public</span> <span class="nc">Builder</span> <span class="nf">a3</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">a3</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span> <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="kd">public</span> <span class="nc">Test</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">return</span> <span class="k">new</span> <span class="nf">Builder</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="nf">Test</span><span class="o">(</span><span class="nc">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">a1</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">a1</span><span class="o">;</span>
		<span class="n">a2</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">a2</span><span class="o">;</span>
		<span class="n">a3</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">a3</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="c1">//inside main</span>
<span class="nc">Test</span> <span class="n">test</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Test</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="n">a1</span><span class="o">).</span><span class="na">a2</span><span class="o">(</span><span class="n">a2</span><span class="o">).</span><span class="na">build</span><span class="o">()</span>
</code></pre></div></div> <p>Using this pattern, instead of making the object directly, the client calls a constructor with all of the required parameters and gets a builder object. Using this builder object, we get access to setter methods which returns the same builder object but after setting some parameters of the object for which the setter method was invoked. Then finally the <code class="language-plaintext highlighter-rouge">build</code> methods is called which returns the desired class’s object.</p> <p>This is a substitute for the named optional parameters in Python and Scala.</p> <p><code class="language-plaintext highlighter-rouge">Builder</code> functionality is also well suite to class hierarchies. I’ll come back to this when I have covered <em>recursive type parameter</em> and <code class="language-plaintext highlighter-rouge">clone()</code></p> <p>References:</p> <ul> <li><a href="https://www.captaindebug.com/2011/05/telescoping-constructor-antipattern#:~:text=The%20Telescoping%20Constructor%20is%20an,there%20are%20better%20alternatives%20availble.">Captain Debug’s Blog: The Telescoping Constructor (Anti)Pattern</a></li> </ul> <h2 id="static-factory-methods">Static Factory Methods</h2> <p>Static factory methods in Java are basically like constructors but carry a meaningful name to them. They are static methods that return an instance of the native class. These methods can come in handy when you need to have multiple constructors that return the object but with some form of different configuration.</p> <aside> 💡 In case you forgot, `static` methods don’t need an object of a class to be called. Thus these static factory methods come in handy. </aside> <p>These methods have the following advantages over constructors -</p> <ol> <li>Static Factory methods allow reuse of already created instances or use cached instances of a class, instead of creating new ones. This can lead to improve in performances. An example of this is is <code class="language-plaintext highlighter-rouge">Boolean.valueOf(boolean var)</code></li> <li>It can also return an object of the subtype thus giving you more flexibility over choice of the class of the object returned. This also allows to return object of classes without making those classes public.</li> <li>As I had mentioned earlier, another advantage is that object can vary from call to call as function of the input parameters. <code class="language-plaintext highlighter-rouge">Enum</code> class makes use of this advantage and thus does not have any public constructors.</li> </ol>]]></content><author><name></name></author><category term="coding,"/><category term="java"/><category term="coding,"/><category term="java"/><summary type="html"><![CDATA[Notes of the book that I was suggested while interning in Sprinklr]]></summary></entry><entry><title type="html">Good Coding Practices</title><link href="https://rvk7895.github.io/blog/2023/good-coding-practices/" rel="alternate" type="text/html" title="Good Coding Practices"/><published>2023-06-23T15:12:00+00:00</published><updated>2023-06-23T15:12:00+00:00</updated><id>https://rvk7895.github.io/blog/2023/good-coding-practices</id><content type="html" xml:base="https://rvk7895.github.io/blog/2023/good-coding-practices/"><![CDATA[<h1 id="write-better-log-statements">Write better log statements</h1> <p>As a developer, you might assume that adding logging statements is an easy job. After all, what’s there to it? Just write a simple <code class="language-plaintext highlighter-rouge">print</code> or <code class="language-plaintext highlighter-rouge">System.out.println()</code> statement, and you’re done, right? (Although, let’s be real, Java, what’s up with that unnecessarily long syntax?)</p> <p>However, the reality is that logging is one of the most essential tools for debugging your code. Without proper logging, you can’t easily track down bugs, troubleshoot issues, or understand how your code is behaving in different environments. And if you’re not writing descriptive log statements that are easily understood by other developers, then it’s as good as a knitted condom - it might look good, but it’s not going to be helpful when you really need it.</p> <p>So, how can you write better log statements? How can you make sure that your logging is effective and helpful for you, your team, and any other developers who might need to work with your code? Here are some tips to consider:</p> <ul> <li>Use meaningful log messages that provide information about the context in which the log message is being generated. This can include details like the function or method where the log message is being generated, the values of any relevant variables, and any other contextual information that might be helpful for understanding what’s happening.</li> <li>Use log levels appropriately to indicate the severity of the log message. For example, you might use a “debug” log level for messages that are only relevant for developers, and a “warning” log level for messages that indicate potential issues that should be addressed.</li> <li>Avoid using hard-coded strings in log messages. Instead, use constants or variables to make log messages more maintainable and easier to read. This can help ensure that all your log messages are consistent and use the same terminology, which can be especially helpful when you’re dealing with a complex codebase.</li> <li>Be consistent in your log message format and structure. This can include details like the order of the message components, the use of whitespace and line breaks, and any other formatting details that can help make your log messages more readable and consistent.</li> <li>Include relevant information such as the timestamp, thread ID, and relevant metadata. This can help you track down issues and understand how your code is behaving in different environments.</li> <li>Use log aggregation tools such as Logstash, Fluentd, or Splunk to centralize and analyze your logs. These tools can help you easily search through your logs, identify patterns or trends, and troubleshoot issues more quickly and effectively.</li> </ul> <p>By following these tips, you can improve your logging and make it more effective for your team and your codebase. So, don’t skimp on your logging - take the time to write clear, concise, and helpful log messages that will make your life easier in the long run.</p> <hr/> <h1 id="close-your-goddamn-resources">Close your goddamn resources</h1> <p>One of the most common reasons on why builds in production fail is because of improper usage of the resources. A typical application nowadays would deal will deal with a lot of resources like <strong>Files, Sockets and Database Connections</strong>. These resources need to be handled with a lot of care, because an operating system allocates the application system resources, and typically systems have an upper limit on this. If for some reason the program fails or an exception occurs and the resources aren’t freed up, it keeps on building up, and this leads to application servers being frequently restarted when resource exhaustion occurs.</p> <p>For any resources that has been opened, a corresponding call to its <code class="language-plaintext highlighter-rouge">close()</code> method should be made. Also effective use of <code class="language-plaintext highlighter-rouge">try/catch/finally</code> is needed when dealing with outside resources, to make sure that any execution path leads to proper closing of the resources also.</p> <p>Many programming languages like Python and Ruby provide language level facilities which allow automatic handling of resources. In Java also a programming construct known as <code class="language-plaintext highlighter-rouge">try-with-resource</code> allows an effective way for automatic handling of resources. The syntax for <code class="language-plaintext highlighter-rouge">try-with-resource</code> is as follows:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="o">(</span>
			<span class="c1">//Resource 1 Declaration;</span>
			<span class="c1">// .</span>
			<span class="c1">// .</span>
			<span class="c1">//Resource n Declaration;</span>
		<span class="o">)</span> <span class="o">{</span>
				<span class="c1">// code</span>
			<span class="o">}</span>
<span class="k">catch</span> <span class="o">{</span>
				<span class="c1">//code</span>
			<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="coding"/><category term="coding"/><summary type="html"><![CDATA[Collection of coding practices that I realize myself or learn from others.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://rvk7895.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://rvk7895.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://rvk7895.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry></feed>